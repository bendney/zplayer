# Makefile.in generated by automake 1.9.6 from Makefile.am.
# @configure_input@

# Copyright (C) 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002,
# 2003, 2004, 2005  Free Software Foundation, Inc.
# This Makefile.in is free software; the Free Software Foundation
# gives unlimited permission to copy and/or distribute it,
# with or without modifications, as long as this notice is preserved.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.

@SET_MAKE@

#
# Makefile.am @template@ for su module
#
# Copyright (C) 2006 Nokia Corporation
# Contact: Pekka Pessi <pekka.pessi@nokia.com>
# Licensed under LGPL. See file COPYING.
#

# ----------------------------------------------------------------------
# Headers

# ----------------------------------------------------------------------
# Build targets

# common Makefile targets for libsofia-sip-ua(-glib) modules
# ----------------------------------------------------------

#
# run tests with valgrind
#

# Copyright (C) 2007 Nokia Corporation.

# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public License
# as published by the Free Software Foundation; either version 2.1 of
# the License, or (at your option) any later version.

# This file contains free software from Makefile.in by the Free Software
# Foundation:

# Copyright (C) 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002,
# 2003, 2004, 2005  Free Software Foundation, Inc.
# This Makefile.in is free software; the Free Software Foundation
# gives unlimited permission to copy and/or distribute it,
# with or without modifications, as long as this notice is preserved.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.

#
# Generate lcov output
#

#
# Copyright (C) 2007 Nokia Corporation
# Contact: Pekka Pessi <pekka.pessi@nokia.com>
# Licensed under LGPL. See file COPYING.
#

# Silent compilation w/ Automake 1.9 or 1.10
# ----------------------------------------------------------

# Automake 1.9.6 is not clever enough to override suffix rules within if
# if SOFIA_COMPILE_SILENT




srcdir = @srcdir@
top_srcdir = @top_srcdir@
VPATH = @srcdir@
pkgdatadir = $(datadir)/@PACKAGE@
pkglibdir = $(libdir)/@PACKAGE@
pkgincludedir = $(includedir)/@PACKAGE@
top_builddir = ../..
am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd
INSTALL = @INSTALL@
install_sh_DATA = $(install_sh) -c -m 644
install_sh_PROGRAM = $(install_sh) -c
install_sh_SCRIPT = $(install_sh) -c
INSTALL_HEADER = $(INSTALL_DATA)
transform = $(program_transform_name)
NORMAL_INSTALL = :
PRE_INSTALL = :
POST_INSTALL = :
NORMAL_UNINSTALL = :
PRE_UNINSTALL = :
POST_UNINSTALL = :
build_triplet = @build@
host_triplet = @host@
target_triplet = @target@
bin_PROGRAMS = addrinfo$(EXEEXT) localinfo$(EXEEXT)
check_PROGRAMS = torture_su$(EXEEXT) torture_su_port$(EXEEXT) \
	torture_su_alloc$(EXEEXT) torture_su_time$(EXEEXT) \
	torture_su_tag$(EXEEXT) test_htable$(EXEEXT) \
	test_htable2$(EXEEXT) torture_rbtree$(EXEEXT) \
	torture_heap$(EXEEXT) test_memmem$(EXEEXT) \
	torture_su_bm$(EXEEXT) torture_su_root$(EXEEXT) \
	torture_su_timer$(EXEEXT) test_su$(EXEEXT) su_proxy$(EXEEXT) \
	test_poll$(EXEEXT) $(am__EXEEXT_1)
DIST_COMMON = $(am__nobase_include_sofia_HEADERS_DIST) \
	$(dist_pkgdata_SCRIPTS) $(srcdir)/Doxyfile.in \
	$(srcdir)/Makefile.am $(srcdir)/Makefile.in \
	$(top_srcdir)/rules/lcov.am $(top_srcdir)/rules/silent.am \
	$(top_srcdir)/rules/sofia.am $(top_srcdir)/rules/valcheck.am \
	ChangeLog

# Use with --enable-ndebug
@NDEBUG_TRUE@am__append_1 = -DNDEBUG
@HAVE_GENPNG_TRUE@@HAVE_LCOV_TRUE@am__append_2 = --frames
@HAVE_LCOV_TRUE@am__append_3 = lcov lcov-report lcov-rerun clean-lcov covcheck uncovered
subdir = libsofia-sip-ua/su
ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
am__aclocal_m4_deps = $(top_srcdir)/m4/libtool.m4 \
	$(top_srcdir)/m4/ltoptions.m4 $(top_srcdir)/m4/ltsugar.m4 \
	$(top_srcdir)/m4/ltversion.m4 $(top_srcdir)/m4/lt~obsolete.m4 \
	$(top_srcdir)/m4/sac-coverage.m4 \
	$(top_srcdir)/m4/sac-general.m4 \
	$(top_srcdir)/m4/sac-openssl.m4 $(top_srcdir)/m4/sac-su2.m4 \
	$(top_srcdir)/m4/sac-tport.m4 $(top_srcdir)/configure.ac
am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \
	$(ACLOCAL_M4)
mkinstalldirs = $(install_sh) -d
CONFIG_HEADER = $(top_builddir)/config.h \
	$(top_builddir)/libsofia-sip-ua/su/sofia-sip/su_configure.h
CONFIG_CLEAN_FILES = Doxyfile
LTLIBRARIES = $(noinst_LTLIBRARIES)
am__DEPENDENCIES_1 =
am__libsu_la_SOURCES_DIST = su.c su_errno.c su_addrinfo.c su_alloc.c \
	su_alloc_lock.c su_strdup.c su_sprintf.c su_strlst.c \
	su_vector.c su_time.c su_time0.c su_wait.c su_root.c \
	su_timer.c su_port.c su_port.h su_base_port.c \
	su_pthread_port.c su_socket_port.c su_poll_port.c \
	su_epoll_port.c su_select_port.c su_kqueue_port.c \
	su_devpoll_port.c su_localinfo.c su_os_nw.c su_taglist.c \
	su_tag.c su_tag_io.c su_log.c su_global_log.c su_default_log.c \
	su_module_debug.h su_md5.c su_uniqueid.c su_bm.c smoothsort.c \
	su_string.c string0.c su_osx_runloop.c
@COREFOUNDATION_TRUE@am__objects_1 = su_osx_runloop.lo
am_libsu_la_OBJECTS = su.lo su_errno.lo su_addrinfo.lo su_alloc.lo \
	su_alloc_lock.lo su_strdup.lo su_sprintf.lo su_strlst.lo \
	su_vector.lo su_time.lo su_time0.lo su_wait.lo su_root.lo \
	su_timer.lo su_port.lo su_base_port.lo su_pthread_port.lo \
	su_socket_port.lo su_poll_port.lo su_epoll_port.lo \
	su_select_port.lo su_kqueue_port.lo su_devpoll_port.lo \
	su_localinfo.lo su_os_nw.lo su_taglist.lo su_tag.lo \
	su_tag_io.lo su_log.lo su_global_log.lo su_default_log.lo \
	su_md5.lo su_uniqueid.lo su_bm.lo smoothsort.lo su_string.lo \
	string0.lo $(am__objects_1)
libsu_la_OBJECTS = $(am_libsu_la_OBJECTS)
am__installdirs = "$(DESTDIR)$(bindir)" "$(DESTDIR)$(pkgdatadir)" \
	"$(DESTDIR)$(include_sofiadir)" \
	"$(DESTDIR)$(include_sofiadir)"
binPROGRAMS_INSTALL = $(INSTALL_PROGRAM)
@COREFOUNDATION_TRUE@am__EXEEXT_1 = torture_su_root_osx$(EXEEXT) \
@COREFOUNDATION_TRUE@	test_su_osx$(EXEEXT)
PROGRAMS = $(bin_PROGRAMS)
addrinfo_SOURCES = addrinfo.c
addrinfo_OBJECTS = addrinfo.$(OBJEXT)
addrinfo_LDADD = $(LDADD)
addrinfo_DEPENDENCIES = libsu.la $(am__DEPENDENCIES_1)
localinfo_SOURCES = localinfo.c
localinfo_OBJECTS = localinfo.$(OBJEXT)
localinfo_LDADD = $(LDADD)
localinfo_DEPENDENCIES = libsu.la $(am__DEPENDENCIES_1)
su_proxy_SOURCES = su_proxy.c
su_proxy_OBJECTS = su_proxy.$(OBJEXT)
su_proxy_LDADD = $(LDADD)
su_proxy_DEPENDENCIES = libsu.la $(am__DEPENDENCIES_1)
test_htable_SOURCES = test_htable.c
test_htable_OBJECTS = test_htable.$(OBJEXT)
test_htable_LDADD = $(LDADD)
test_htable_DEPENDENCIES = libsu.la $(am__DEPENDENCIES_1)
test_htable2_SOURCES = test_htable2.c
test_htable2_OBJECTS = test_htable2.$(OBJEXT)
test_htable2_LDADD = $(LDADD)
test_htable2_DEPENDENCIES = libsu.la $(am__DEPENDENCIES_1)
test_memmem_SOURCES = test_memmem.c
test_memmem_OBJECTS = test_memmem.$(OBJEXT)
test_memmem_LDADD = $(LDADD)
test_memmem_DEPENDENCIES = libsu.la $(am__DEPENDENCIES_1)
test_poll_SOURCES = test_poll.c
test_poll_OBJECTS = test_poll.$(OBJEXT)
test_poll_LDADD = $(LDADD)
test_poll_DEPENDENCIES = libsu.la $(am__DEPENDENCIES_1)
test_su_SOURCES = test_su.c
test_su_OBJECTS = test_su.$(OBJEXT)
test_su_LDADD = $(LDADD)
test_su_DEPENDENCIES = libsu.la $(am__DEPENDENCIES_1)
test_su_osx_SOURCES = test_su_osx.c
test_su_osx_OBJECTS = test_su_osx.$(OBJEXT)
test_su_osx_LDADD = $(LDADD)
test_su_osx_DEPENDENCIES = libsu.la $(am__DEPENDENCIES_1)
torture_heap_SOURCES = torture_heap.c
torture_heap_OBJECTS = torture_heap.$(OBJEXT)
torture_heap_LDADD = $(LDADD)
torture_heap_DEPENDENCIES = libsu.la $(am__DEPENDENCIES_1)
torture_rbtree_SOURCES = torture_rbtree.c
torture_rbtree_OBJECTS = torture_rbtree.$(OBJEXT)
torture_rbtree_LDADD = $(LDADD)
torture_rbtree_DEPENDENCIES = libsu.la $(am__DEPENDENCIES_1)
torture_su_SOURCES = torture_su.c
torture_su_OBJECTS = torture_su.$(OBJEXT)
torture_su_LDADD = $(LDADD)
torture_su_DEPENDENCIES = libsu.la $(am__DEPENDENCIES_1)
torture_su_alloc_SOURCES = torture_su_alloc.c
torture_su_alloc_OBJECTS = torture_su_alloc.$(OBJEXT)
torture_su_alloc_LDADD = $(LDADD)
torture_su_alloc_DEPENDENCIES = libsu.la $(am__DEPENDENCIES_1)
torture_su_bm_SOURCES = torture_su_bm.c
torture_su_bm_OBJECTS = torture_su_bm.$(OBJEXT)
torture_su_bm_LDADD = $(LDADD)
torture_su_bm_DEPENDENCIES = libsu.la $(am__DEPENDENCIES_1)
torture_su_port_SOURCES = torture_su_port.c
torture_su_port_OBJECTS = torture_su_port.$(OBJEXT)
torture_su_port_LDADD = $(LDADD)
torture_su_port_DEPENDENCIES = libsu.la $(am__DEPENDENCIES_1)
torture_su_root_SOURCES = torture_su_root.c
torture_su_root_OBJECTS = torture_su_root.$(OBJEXT)
torture_su_root_LDADD = $(LDADD)
torture_su_root_DEPENDENCIES = libsu.la $(am__DEPENDENCIES_1)
torture_su_root_osx_SOURCES = torture_su_root_osx.c
torture_su_root_osx_OBJECTS = torture_su_root_osx.$(OBJEXT)
torture_su_root_osx_LDADD = $(LDADD)
torture_su_root_osx_DEPENDENCIES = libsu.la $(am__DEPENDENCIES_1)
torture_su_tag_SOURCES = torture_su_tag.c
torture_su_tag_OBJECTS = torture_su_tag.$(OBJEXT)
torture_su_tag_LDADD = $(LDADD)
torture_su_tag_DEPENDENCIES = libsu.la $(am__DEPENDENCIES_1)
torture_su_time_SOURCES = torture_su_time.c
torture_su_time_OBJECTS = torture_su_time.$(OBJEXT)
torture_su_time_LDADD = $(LDADD)
torture_su_time_DEPENDENCIES = libsu.la $(am__DEPENDENCIES_1)
torture_su_timer_SOURCES = torture_su_timer.c
torture_su_timer_OBJECTS = torture_su_timer.$(OBJEXT)
torture_su_timer_LDADD = $(LDADD)
torture_su_timer_DEPENDENCIES = libsu.la $(am__DEPENDENCIES_1)
dist_pkgdataSCRIPT_INSTALL = $(INSTALL_SCRIPT)
SCRIPTS = $(dist_pkgdata_SCRIPTS)
DEFAULT_INCLUDES = -I. -I$(srcdir) -I$(top_builddir) -I$(top_builddir)/libsofia-sip-ua/su/sofia-sip
depcomp = $(SHELL) $(top_srcdir)/depcomp
am__depfiles_maybe = depfiles
COMPILE = $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) \
	$(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)
CCLD = $(CC)
SOURCES = $(libsu_la_SOURCES) $(EXTRA_libsu_la_SOURCES) addrinfo.c \
	localinfo.c su_proxy.c test_htable.c test_htable2.c \
	test_memmem.c test_poll.c test_su.c test_su_osx.c \
	torture_heap.c torture_rbtree.c torture_su.c \
	torture_su_alloc.c torture_su_bm.c torture_su_port.c \
	torture_su_root.c torture_su_root_osx.c torture_su_tag.c \
	torture_su_time.c torture_su_timer.c
DIST_SOURCES = $(am__libsu_la_SOURCES_DIST) $(EXTRA_libsu_la_SOURCES) \
	addrinfo.c localinfo.c su_proxy.c test_htable.c test_htable2.c \
	test_memmem.c test_poll.c test_su.c test_su_osx.c \
	torture_heap.c torture_rbtree.c torture_su.c \
	torture_su_alloc.c torture_su_bm.c torture_su_port.c \
	torture_su_root.c torture_su_root_osx.c torture_su_tag.c \
	torture_su_time.c torture_su_timer.c
am__nobase_include_sofia_HEADERS_DIST = sofia-sip/su_types.h \
	sofia-sip/su.h sofia-sip/su_errno.h sofia-sip/su_addrinfo.h \
	sofia-sip/su_localinfo.h sofia-sip/su_wait.h \
	sofia-sip/su_alloc.h sofia-sip/su_alloc_stat.h \
	sofia-sip/su_strlst.h sofia-sip/su_vector.h \
	sofia-sip/su_time.h sofia-sip/su_tag.h \
	sofia-sip/su_tag_class.h sofia-sip/su_tagarg.h \
	sofia-sip/su_tag_io.h sofia-sip/su_tag_inline.h \
	sofia-sip/htable.h sofia-sip/htable2.h sofia-sip/rbtree.h \
	sofia-sip/heap.h sofia-sip/su_debug.h sofia-sip/su_log.h \
	sofia-sip/su_config.h sofia-sip/su_md5.h \
	sofia-sip/su_uniqueid.h sofia-sip/su_bm.h sofia-sip/tstdef.h \
	sofia-sip/su_os_nw.h sofia-sip/su_string.h sofia-sip/string0.h \
	sofia-sip/su_osx_runloop.h
am__vpath_adj_setup = srcdirstrip=`echo "$(srcdir)" | sed 's|.|.|g'`;
am__vpath_adj = case $$p in \
    $(srcdir)/*) f=`echo "$$p" | sed "s|^$$srcdirstrip/||"`;; \
    *) f=$$p;; \
  esac;
am__strip_dir = `echo $$p | sed -e 's|^.*/||'`;
nobase_include_sofiaHEADERS_INSTALL = $(install_sh_DATA)
nobase_nodist_include_sofiaHEADERS_INSTALL = $(install_sh_DATA)
HEADERS = $(nobase_include_sofia_HEADERS) \
	$(nobase_nodist_include_sofia_HEADERS)
CTAGS = ctags
DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)
ACLOCAL = @ACLOCAL@
ACLOCAL_AMFLAGS = @ACLOCAL_AMFLAGS@
ALLOCA = @ALLOCA@
AMDEP_FALSE = @AMDEP_FALSE@
AMDEP_TRUE = @AMDEP_TRUE@
AMTAR = @AMTAR@
AR = @AR@
AUTOCONF = @AUTOCONF@
AUTOHEADER = @AUTOHEADER@
AUTOMAKE = @AUTOMAKE@
AWK = @AWK@
CC = @CC@
CCDEPMODE = @CCDEPMODE@
CFLAGS = @CFLAGS@
CHECK_CFLAGS = @CHECK_CFLAGS@
CHECK_LIBS = @CHECK_LIBS@
COREFOUNDATION_FALSE = @COREFOUNDATION_FALSE@
COREFOUNDATION_TRUE = @COREFOUNDATION_TRUE@
COVERAGE_FLAGS = @COVERAGE_FLAGS@
CPP = @CPP@
CPPFLAGS = @CPPFLAGS@
CWFLAG = @CWFLAG@
CYGPATH_W = @CYGPATH_W@
DEFS = @DEFS@
DEPDIR = @DEPDIR@
DOXYGEN = @DOXYGEN@
DSYMUTIL = @DSYMUTIL@
DUMPBIN = @DUMPBIN@
ECHO_C = @ECHO_C@
ECHO_N = @ECHO_N@
ECHO_T = @ECHO_T@
EGREP = @EGREP@
ENABLE_COVERAGE_FALSE = @ENABLE_COVERAGE_FALSE@
ENABLE_COVERAGE_TRUE = @ENABLE_COVERAGE_TRUE@
ETAGS = @ETAGS@
EXEEXT = @EXEEXT@
EXPENSIVE_CHECKS_FALSE = @EXPENSIVE_CHECKS_FALSE@
EXPENSIVE_CHECKS_TRUE = @EXPENSIVE_CHECKS_TRUE@
FGREP = @FGREP@
GCOV = @GCOV@
GENHTML = @GENHTML@
GENPNG = @GENPNG@
GLIB_CFLAGS = @GLIB_CFLAGS@
GLIB_LIBS = @GLIB_LIBS@
GLIB_VERSION = @GLIB_VERSION@
GREP = @GREP@
HAVE_CHECK_FALSE = @HAVE_CHECK_FALSE@
HAVE_CHECK_TRUE = @HAVE_CHECK_TRUE@
HAVE_DOXYGEN_FALSE = @HAVE_DOXYGEN_FALSE@
HAVE_DOXYGEN_TRUE = @HAVE_DOXYGEN_TRUE@
HAVE_GENPNG_FALSE = @HAVE_GENPNG_FALSE@
HAVE_GENPNG_TRUE = @HAVE_GENPNG_TRUE@
HAVE_GLIB_FALSE = @HAVE_GLIB_FALSE@
HAVE_GLIB_TRUE = @HAVE_GLIB_TRUE@
HAVE_LCOV_FALSE = @HAVE_LCOV_FALSE@
HAVE_LCOV_TRUE = @HAVE_LCOV_TRUE@
HAVE_MINGW32_FALSE = @HAVE_MINGW32_FALSE@
HAVE_MINGW32_TRUE = @HAVE_MINGW32_TRUE@
HAVE_NTH_FALSE = @HAVE_NTH_FALSE@
HAVE_NTH_TRUE = @HAVE_NTH_TRUE@
HAVE_NTLM_FALSE = @HAVE_NTLM_FALSE@
HAVE_NTLM_TRUE = @HAVE_NTLM_TRUE@
HAVE_STUN_FALSE = @HAVE_STUN_FALSE@
HAVE_STUN_TRUE = @HAVE_STUN_TRUE@
HAVE_TLS_FALSE = @HAVE_TLS_FALSE@
HAVE_TLS_TRUE = @HAVE_TLS_TRUE@
INSTALL_DATA = @INSTALL_DATA@
INSTALL_PROGRAM = @INSTALL_PROGRAM@
INSTALL_SCRIPT = @INSTALL_SCRIPT@
INSTALL_STRIP_PROGRAM = @INSTALL_STRIP_PROGRAM@
LCOV = @LCOV@
LD = @LD@
LDFLAGS = @LDFLAGS@
LIBOBJS = @LIBOBJS@
LIBS = @LIBS@
LIBTOOL = @LIBTOOL@
LIBVER_SOFIA_SIP_UA_AGE = @LIBVER_SOFIA_SIP_UA_AGE@
LIBVER_SOFIA_SIP_UA_CUR = @LIBVER_SOFIA_SIP_UA_CUR@
LIBVER_SOFIA_SIP_UA_GLIB_AGE = @LIBVER_SOFIA_SIP_UA_GLIB_AGE@
LIBVER_SOFIA_SIP_UA_GLIB_CUR = @LIBVER_SOFIA_SIP_UA_GLIB_CUR@
LIBVER_SOFIA_SIP_UA_GLIB_REV = @LIBVER_SOFIA_SIP_UA_GLIB_REV@
LIBVER_SOFIA_SIP_UA_GLIB_SOVER = @LIBVER_SOFIA_SIP_UA_GLIB_SOVER@
LIBVER_SOFIA_SIP_UA_REV = @LIBVER_SOFIA_SIP_UA_REV@
LIBVER_SOFIA_SIP_UA_SOVER = @LIBVER_SOFIA_SIP_UA_SOVER@
LIPO = @LIPO@
LN_S = @LN_S@
LTLIBOBJS = @LTLIBOBJS@
MAINT = @MAINT@
MAINTAINER_MODE_FALSE = @MAINTAINER_MODE_FALSE@
MAINTAINER_MODE_TRUE = @MAINTAINER_MODE_TRUE@
MAKEINFO = @MAKEINFO@
MINGW_ENVIRONMENT = @MINGW_ENVIRONMENT@
MOSTLYCLEANFILES = @MOSTLYCLEANFILES@
NDEBUG_FALSE = @NDEBUG_FALSE@
NDEBUG_TRUE = @NDEBUG_TRUE@
NM = @NM@
NMEDIT = @NMEDIT@
OBJDUMP = @OBJDUMP@
OBJEXT = @OBJEXT@
OTOOL = @OTOOL@
OTOOL64 = @OTOOL64@
PACKAGE = @PACKAGE@
PACKAGE_BUGREPORT = @PACKAGE_BUGREPORT@
PACKAGE_NAME = @PACKAGE_NAME@
PACKAGE_STRING = @PACKAGE_STRING@
PACKAGE_TARNAME = @PACKAGE_TARNAME@
PACKAGE_URL = @PACKAGE_URL@
PACKAGE_VERSION = @PACKAGE_VERSION@
PATH_SEPARATOR = @PATH_SEPARATOR@
PKG_CONFIG = @PKG_CONFIG@
PKG_CONFIG_LIBDIR = @PKG_CONFIG_LIBDIR@
PKG_CONFIG_PATH = @PKG_CONFIG_PATH@
RANLIB = @RANLIB@
REPLACE_LIBADD = @REPLACE_LIBADD@
SED = @SED@
SET_MAKE = @SET_MAKE@
SHELL = @SHELL@
SOFIA_CFLAGS = @SOFIA_CFLAGS@
SOFIA_GLIB_CFLAGS = @SOFIA_GLIB_CFLAGS@
SOFIA_GLIB_PKG_REQUIRES = @SOFIA_GLIB_PKG_REQUIRES@
SOFIA_PLAT_CFLAGS = @SOFIA_PLAT_CFLAGS@
STRIP = @STRIP@
TESTS_ENVIRONMENT = @TESTS_ENVIRONMENT@
VERSION = @VERSION@
VER_LIBSOFIA_SIP_UA_MAJOR_MINOR = @VER_LIBSOFIA_SIP_UA_MAJOR_MINOR@
ac_ct_CC = @ac_ct_CC@
ac_ct_DUMPBIN = @ac_ct_DUMPBIN@
am__fastdepCC_FALSE = @am__fastdepCC_FALSE@
am__fastdepCC_TRUE = @am__fastdepCC_TRUE@
am__include = @am__include@
am__leading_dot = @am__leading_dot@
am__quote = @am__quote@
am__tar = @am__tar@
am__untar = @am__untar@
bindir = @bindir@
build = @build@
build_alias = @build_alias@
build_cpu = @build_cpu@
build_os = @build_os@
build_vendor = @build_vendor@
datadir = @datadir@
datarootdir = @datarootdir@
docdir = @docdir@
dvidir = @dvidir@
exec_prefix = @exec_prefix@
host = @host@
host_alias = @host_alias@
host_cpu = @host_cpu@
host_os = @host_os@
host_vendor = @host_vendor@
htmldir = @htmldir@
include_sofiadir = @include_sofiadir@
includedir = @includedir@
infodir = @infodir@
install_sh = @install_sh@
libdir = @libdir@
libexecdir = @libexecdir@
localedir = @localedir@
localstatedir = @localstatedir@
lt_ECHO = @lt_ECHO@
mandir = @mandir@
mkdir_p = @mkdir_p@
oldincludedir = @oldincludedir@
openssl_CFLAGS = @openssl_CFLAGS@
openssl_LIBS = @openssl_LIBS@
pdfdir = @pdfdir@
prefix = @prefix@
program_transform_name = @program_transform_name@
psdir = @psdir@
sbindir = @sbindir@
sharedstatedir = @sharedstatedir@
sysconfdir = @sysconfdir@
target = @target@
target_alias = @target_alias@
target_cpu = @target_cpu@
target_os = @target_os@
target_vendor = @target_vendor@
noinst_LTLIBRARIES = libsu.la

# ----------------------------------------------------------------------
# Tests
TESTS = torture_su torture_su_port \
			torture_su_alloc torture_su_time torture_su_tag \
			test_htable test_htable2 torture_rbtree torture_heap \
			test_memmem torture_su_bm \
			torture_su_root torture_su_timer \
			run_addrinfo run_localinfo run_test_su \
			$(OSXTESTS)


# ----------------------------------------------------------------------
# Rules for building the targets
BUILT_SOURCES = su_tag_ref.c
nobase_include_sofia_HEADERS = \
			sofia-sip/su_types.h sofia-sip/su.h \
			sofia-sip/su_errno.h sofia-sip/su_addrinfo.h \
			sofia-sip/su_localinfo.h sofia-sip/su_wait.h \
			sofia-sip/su_alloc.h sofia-sip/su_alloc_stat.h \
			sofia-sip/su_strlst.h sofia-sip/su_vector.h \
			sofia-sip/su_time.h sofia-sip/su_tag.h \
			sofia-sip/su_tag_class.h sofia-sip/su_tagarg.h \
			sofia-sip/su_tag_io.h sofia-sip/su_tag_inline.h \
			sofia-sip/htable.h sofia-sip/htable2.h \
			sofia-sip/rbtree.h sofia-sip/heap.h \
			sofia-sip/su_debug.h sofia-sip/su_log.h \
			sofia-sip/su_config.h sofia-sip/su_md5.h \
			sofia-sip/su_uniqueid.h sofia-sip/su_bm.h \
			sofia-sip/tstdef.h sofia-sip/su_os_nw.h \
			sofia-sip/su_string.h sofia-sip/string0.h \
			$(OSXHEADERS)

nobase_nodist_include_sofia_HEADERS = sofia-sip/su_configure.h
libsu_la_SOURCES = \
	su.c su_errno.c su_addrinfo.c \
	su_alloc.c su_alloc_lock.c su_strdup.c su_sprintf.c \
	su_strlst.c su_vector.c \
	su_time.c su_time0.c \
	su_wait.c su_root.c su_timer.c \
	su_port.c  su_port.h \
	su_base_port.c su_pthread_port.c su_socket_port.c \
	su_poll_port.c su_epoll_port.c su_select_port.c su_kqueue_port.c \
	su_devpoll_port.c \
	su_localinfo.c \
	su_os_nw.c \
	su_taglist.c su_tag.c su_tag_io.c \
	su_log.c su_global_log.c su_default_log.c su_module_debug.h \
	su_md5.c su_uniqueid.c su_bm.c smoothsort.c su_string.c string0.c \
	$(OSXSOURCES)

EXTRA_libsu_la_SOURCES = \
			memmem.c strtoull.c \
			memspn.c memcspn.c memccpy.c \
			inet_ntop.c inet_pton.c poll.c getopt.c \
			su_tag_ref.c


# Automake 1.9 complains about missing CXX

# ----------------------------------------------------------------------
# Install and distribution rules
EXTRA_DIST = su_win32_port.c su_open_c_localinfo.cpp su.docs \
	run_addrinfo run_localinfo run_test_su su_osx_runloop.c \
	sofia-sip/su_osx_runloop.h
libsu_la_LIBADD = $(REPLACE_LIBADD)
libsu_la_DEPENDENCIES = $(REPLACE_LIBADD)
COVERAGE_INPUT = $(libsu_la_SOURCES) $(include_sofia_HEADERS)
LDADD = libsu.la $(openssl_LIBS)
dist_pkgdata_SCRIPTS = tag_dll.awk

# ----------------------------------------------------------------------
# Automake options
AUTOMAKE_OPTIONS = foreign
sofiasrcdir = ${top_srcdir}/libsofia-sip-ua
sofiabuilddir = ${top_builddir}/libsofia-sip-ua
AM_CFLAGS = $(CWFLAG) $(SOFIA_COVERAGE) $(SOFIA_CFLAGS) \
	$(openssl_CFLAGS) $(SOFIA_PLAT_CFLAGS) $(am__append_1)
SOFIA_COVERAGE = $(COVERAGE_FLAGS)
DISTCLEANFILES = $(BUILT_SOURCES)

# rules for building tag files
TAG_AWK = ${sofiasrcdir}/su/tag_dll.awk
SUFFIXES = _tag_ref.c _tag.c
INTERNAL_INCLUDES = \
    -I${sofiasrcdir}/features -I${sofiabuilddir}/features \
    -I${sofiasrcdir}/ipt -I${sofiabuilddir}/ipt \
    -I${sofiasrcdir}/iptsec -I${sofiabuilddir}/iptsec \
    -I${sofiasrcdir}/bnf -I${sofiabuilddir}/bnf \
    -I${sofiasrcdir}/http -I${sofiabuilddir}/http \
    -I${sofiasrcdir}/msg -I${sofiabuilddir}/msg \
    -I${sofiasrcdir}/nth -I${sofiabuilddir}/nth \
    -I${sofiasrcdir}/nta -I${sofiabuilddir}/nta \
    -I${sofiasrcdir}/nea -I${sofiabuilddir}/nea \
    -I${sofiasrcdir}/nua -I${sofiabuilddir}/nua \
    -I${sofiasrcdir}/soa -I${sofiabuilddir}/soa \
    -I${sofiasrcdir}/sdp -I${sofiabuilddir}/sdp \
    -I${sofiasrcdir}/sip -I${sofiabuilddir}/sip \
    -I${sofiasrcdir}/soa -I${sofiabuilddir}/soa \
    -I${sofiasrcdir}/sresolv -I${sofiabuilddir}/sresolv \
    -I${sofiasrcdir}/tport -I${sofiabuilddir}/tport \
    -I${sofiasrcdir}/stun -I${sofiabuilddir}/stun \
    -I${sofiasrcdir}/url -I${sofiabuilddir}/url \
    -I${sofiasrcdir}/su -I${sofiabuilddir}/su

PHONY = built-sources clean-built-sources $(am__append_3)
VALGRIND = valgrind
VALGRINDFLAGS = --tool=memcheck

# Scripts
@HAVE_LCOV_TRUE@LCOV_UNCOVERED = ${top_srcdir}/scripts/uncovered
@HAVE_LCOV_TRUE@LCOV_REPORT = ${top_srcdir}/scripts/lcov-report

# Report directory
@HAVE_LCOV_TRUE@lcovdir = ${top_builddir}/lcov

# Options
@HAVE_LCOV_TRUE@GENHTML_OPTIONS = --show-details --legend \
@HAVE_LCOV_TRUE@	$(am__append_2)

# Fancy shell command that expands to directory relative to top_builddir
@HAVE_LCOV_TRUE@expand_subdir = `pwd|sed "s'\`cd ${top_builddir};pwd\`''"`
SOFIA_SILENT = @
LIBTOOL_FLAGS = --silent

# From Automake 1.9.6 - 
LTCOMPILE = $(LIBTOOL) --tag=CC --mode=compile $(LIBTOOL_FLAGS) \
	$(CC) $(DEFS) \
	$(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) \
	$(AM_CFLAGS) $(CFLAGS)

LINK = ${SOFIA_SILENT}test "${SOFIA_SILENT}" != @ || echo '	 LINK $@'; \
	$(LIBTOOL) --tag=CC --mode=link $(LIBTOOL_FLAGS) \
	$(CCLD) $(AM_CFLAGS) $(CFLAGS) \
	$(AM_LDFLAGS) $(LDFLAGS) -o $@


# ----------------------------------------------------------------------
# Sofia specific rules

# ----------------------------------------------------------------------
# OS X stuff
@COREFOUNDATION_TRUE@OSXSOURCES = su_osx_runloop.c
@COREFOUNDATION_TRUE@OSXHEADERS = sofia-sip/su_osx_runloop.h
@COREFOUNDATION_TRUE@OSXPROGS = torture_su_root_osx test_su_osx
@COREFOUNDATION_TRUE@OSXTESTS = torture_su_root_osx run_test_su_osx
all: $(BUILT_SOURCES)
	$(MAKE) $(AM_MAKEFLAGS) all-am

.SUFFIXES:
.SUFFIXES: _tag_ref.c _tag.c .c .lo .o .obj
$(srcdir)/Makefile.in: @MAINTAINER_MODE_TRUE@ $(srcdir)/Makefile.am $(top_srcdir)/rules/sofia.am $(top_srcdir)/rules/valcheck.am $(top_srcdir)/rules/lcov.am $(top_srcdir)/rules/silent.am $(am__configure_deps)
	@for dep in $?; do \
	  case '$(am__configure_deps)' in \
	    *$$dep*) \
	      cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh \
		&& exit 0; \
	      exit 1;; \
	  esac; \
	done; \
	echo ' cd $(top_srcdir) && $(AUTOMAKE) --foreign  libsofia-sip-ua/su/Makefile'; \
	cd $(top_srcdir) && \
	  $(AUTOMAKE) --foreign  libsofia-sip-ua/su/Makefile
.PRECIOUS: Makefile
Makefile: $(srcdir)/Makefile.in $(top_builddir)/config.status
	@case '$?' in \
	  *config.status*) \
	    cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh;; \
	  *) \
	    echo ' cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe)'; \
	    cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe);; \
	esac;

$(top_builddir)/config.status: $(top_srcdir)/configure $(CONFIG_STATUS_DEPENDENCIES)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh

$(top_srcdir)/configure: @MAINTAINER_MODE_TRUE@ $(am__configure_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(ACLOCAL_M4): @MAINTAINER_MODE_TRUE@ $(am__aclocal_m4_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
Doxyfile: $(top_builddir)/config.status $(srcdir)/Doxyfile.in
	cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@

clean-noinstLTLIBRARIES:
	-test -z "$(noinst_LTLIBRARIES)" || rm -f $(noinst_LTLIBRARIES)
	@list='$(noinst_LTLIBRARIES)'; for p in $$list; do \
	  dir="`echo $$p | sed -e 's|/[^/]*$$||'`"; \
	  test "$$dir" != "$$p" || dir=.; \
	  echo "rm -f \"$${dir}/so_locations\""; \
	  rm -f "$${dir}/so_locations"; \
	done
libsu.la: $(libsu_la_OBJECTS) $(libsu_la_DEPENDENCIES) 
	$(LINK)  $(libsu_la_LDFLAGS) $(libsu_la_OBJECTS) $(libsu_la_LIBADD) $(LIBS)
install-binPROGRAMS: $(bin_PROGRAMS)
	@$(NORMAL_INSTALL)
	test -z "$(bindir)" || $(mkdir_p) "$(DESTDIR)$(bindir)"
	@list='$(bin_PROGRAMS)'; for p in $$list; do \
	  p1=`echo $$p|sed 's/$(EXEEXT)$$//'`; \
	  if test -f $$p \
	     || test -f $$p1 \
	  ; then \
	    f=`echo "$$p1" | sed 's,^.*/,,;$(transform);s/$$/$(EXEEXT)/'`; \
	   echo " $(INSTALL_PROGRAM_ENV) $(LIBTOOL) --mode=install $(binPROGRAMS_INSTALL) '$$p' '$(DESTDIR)$(bindir)/$$f'"; \
	   $(INSTALL_PROGRAM_ENV) $(LIBTOOL) --mode=install $(binPROGRAMS_INSTALL) "$$p" "$(DESTDIR)$(bindir)/$$f" || exit 1; \
	  else :; fi; \
	done

uninstall-binPROGRAMS:
	@$(NORMAL_UNINSTALL)
	@list='$(bin_PROGRAMS)'; for p in $$list; do \
	  f=`echo "$$p" | sed 's,^.*/,,;s/$(EXEEXT)$$//;$(transform);s/$$/$(EXEEXT)/'`; \
	  echo " rm -f '$(DESTDIR)$(bindir)/$$f'"; \
	  rm -f "$(DESTDIR)$(bindir)/$$f"; \
	done

clean-binPROGRAMS:
	@list='$(bin_PROGRAMS)'; for p in $$list; do \
	  f=`echo $$p|sed 's/$(EXEEXT)$$//'`; \
	  echo " rm -f $$p $$f"; \
	  rm -f $$p $$f ; \
	done

clean-checkPROGRAMS:
	@list='$(check_PROGRAMS)'; for p in $$list; do \
	  f=`echo $$p|sed 's/$(EXEEXT)$$//'`; \
	  echo " rm -f $$p $$f"; \
	  rm -f $$p $$f ; \
	done
addrinfo$(EXEEXT): $(addrinfo_OBJECTS) $(addrinfo_DEPENDENCIES) 
	@rm -f addrinfo$(EXEEXT)
	$(LINK) $(addrinfo_LDFLAGS) $(addrinfo_OBJECTS) $(addrinfo_LDADD) $(LIBS)
localinfo$(EXEEXT): $(localinfo_OBJECTS) $(localinfo_DEPENDENCIES) 
	@rm -f localinfo$(EXEEXT)
	$(LINK) $(localinfo_LDFLAGS) $(localinfo_OBJECTS) $(localinfo_LDADD) $(LIBS)
su_proxy$(EXEEXT): $(su_proxy_OBJECTS) $(su_proxy_DEPENDENCIES) 
	@rm -f su_proxy$(EXEEXT)
	$(LINK) $(su_proxy_LDFLAGS) $(su_proxy_OBJECTS) $(su_proxy_LDADD) $(LIBS)
test_htable$(EXEEXT): $(test_htable_OBJECTS) $(test_htable_DEPENDENCIES) 
	@rm -f test_htable$(EXEEXT)
	$(LINK) $(test_htable_LDFLAGS) $(test_htable_OBJECTS) $(test_htable_LDADD) $(LIBS)
test_htable2$(EXEEXT): $(test_htable2_OBJECTS) $(test_htable2_DEPENDENCIES) 
	@rm -f test_htable2$(EXEEXT)
	$(LINK) $(test_htable2_LDFLAGS) $(test_htable2_OBJECTS) $(test_htable2_LDADD) $(LIBS)
test_memmem$(EXEEXT): $(test_memmem_OBJECTS) $(test_memmem_DEPENDENCIES) 
	@rm -f test_memmem$(EXEEXT)
	$(LINK) $(test_memmem_LDFLAGS) $(test_memmem_OBJECTS) $(test_memmem_LDADD) $(LIBS)
test_poll$(EXEEXT): $(test_poll_OBJECTS) $(test_poll_DEPENDENCIES) 
	@rm -f test_poll$(EXEEXT)
	$(LINK) $(test_poll_LDFLAGS) $(test_poll_OBJECTS) $(test_poll_LDADD) $(LIBS)
test_su$(EXEEXT): $(test_su_OBJECTS) $(test_su_DEPENDENCIES) 
	@rm -f test_su$(EXEEXT)
	$(LINK) $(test_su_LDFLAGS) $(test_su_OBJECTS) $(test_su_LDADD) $(LIBS)
test_su_osx$(EXEEXT): $(test_su_osx_OBJECTS) $(test_su_osx_DEPENDENCIES) 
	@rm -f test_su_osx$(EXEEXT)
	$(LINK) $(test_su_osx_LDFLAGS) $(test_su_osx_OBJECTS) $(test_su_osx_LDADD) $(LIBS)
torture_heap$(EXEEXT): $(torture_heap_OBJECTS) $(torture_heap_DEPENDENCIES) 
	@rm -f torture_heap$(EXEEXT)
	$(LINK) $(torture_heap_LDFLAGS) $(torture_heap_OBJECTS) $(torture_heap_LDADD) $(LIBS)
torture_rbtree$(EXEEXT): $(torture_rbtree_OBJECTS) $(torture_rbtree_DEPENDENCIES) 
	@rm -f torture_rbtree$(EXEEXT)
	$(LINK) $(torture_rbtree_LDFLAGS) $(torture_rbtree_OBJECTS) $(torture_rbtree_LDADD) $(LIBS)
torture_su$(EXEEXT): $(torture_su_OBJECTS) $(torture_su_DEPENDENCIES) 
	@rm -f torture_su$(EXEEXT)
	$(LINK) $(torture_su_LDFLAGS) $(torture_su_OBJECTS) $(torture_su_LDADD) $(LIBS)
torture_su_alloc$(EXEEXT): $(torture_su_alloc_OBJECTS) $(torture_su_alloc_DEPENDENCIES) 
	@rm -f torture_su_alloc$(EXEEXT)
	$(LINK) $(torture_su_alloc_LDFLAGS) $(torture_su_alloc_OBJECTS) $(torture_su_alloc_LDADD) $(LIBS)
torture_su_bm$(EXEEXT): $(torture_su_bm_OBJECTS) $(torture_su_bm_DEPENDENCIES) 
	@rm -f torture_su_bm$(EXEEXT)
	$(LINK) $(torture_su_bm_LDFLAGS) $(torture_su_bm_OBJECTS) $(torture_su_bm_LDADD) $(LIBS)
torture_su_port$(EXEEXT): $(torture_su_port_OBJECTS) $(torture_su_port_DEPENDENCIES) 
	@rm -f torture_su_port$(EXEEXT)
	$(LINK) $(torture_su_port_LDFLAGS) $(torture_su_port_OBJECTS) $(torture_su_port_LDADD) $(LIBS)
torture_su_root$(EXEEXT): $(torture_su_root_OBJECTS) $(torture_su_root_DEPENDENCIES) 
	@rm -f torture_su_root$(EXEEXT)
	$(LINK) $(torture_su_root_LDFLAGS) $(torture_su_root_OBJECTS) $(torture_su_root_LDADD) $(LIBS)
torture_su_root_osx$(EXEEXT): $(torture_su_root_osx_OBJECTS) $(torture_su_root_osx_DEPENDENCIES) 
	@rm -f torture_su_root_osx$(EXEEXT)
	$(LINK) $(torture_su_root_osx_LDFLAGS) $(torture_su_root_osx_OBJECTS) $(torture_su_root_osx_LDADD) $(LIBS)
torture_su_tag$(EXEEXT): $(torture_su_tag_OBJECTS) $(torture_su_tag_DEPENDENCIES) 
	@rm -f torture_su_tag$(EXEEXT)
	$(LINK) $(torture_su_tag_LDFLAGS) $(torture_su_tag_OBJECTS) $(torture_su_tag_LDADD) $(LIBS)
torture_su_time$(EXEEXT): $(torture_su_time_OBJECTS) $(torture_su_time_DEPENDENCIES) 
	@rm -f torture_su_time$(EXEEXT)
	$(LINK) $(torture_su_time_LDFLAGS) $(torture_su_time_OBJECTS) $(torture_su_time_LDADD) $(LIBS)
torture_su_timer$(EXEEXT): $(torture_su_timer_OBJECTS) $(torture_su_timer_DEPENDENCIES) 
	@rm -f torture_su_timer$(EXEEXT)
	$(LINK) $(torture_su_timer_LDFLAGS) $(torture_su_timer_OBJECTS) $(torture_su_timer_LDADD) $(LIBS)
install-dist_pkgdataSCRIPTS: $(dist_pkgdata_SCRIPTS)
	@$(NORMAL_INSTALL)
	test -z "$(pkgdatadir)" || $(mkdir_p) "$(DESTDIR)$(pkgdatadir)"
	@list='$(dist_pkgdata_SCRIPTS)'; for p in $$list; do \
	  if test -f "$$p"; then d=; else d="$(srcdir)/"; fi; \
	  if test -f $$d$$p; then \
	    f=`echo "$$p" | sed 's|^.*/||;$(transform)'`; \
	    echo " $(dist_pkgdataSCRIPT_INSTALL) '$$d$$p' '$(DESTDIR)$(pkgdatadir)/$$f'"; \
	    $(dist_pkgdataSCRIPT_INSTALL) "$$d$$p" "$(DESTDIR)$(pkgdatadir)/$$f"; \
	  else :; fi; \
	done

uninstall-dist_pkgdataSCRIPTS:
	@$(NORMAL_UNINSTALL)
	@list='$(dist_pkgdata_SCRIPTS)'; for p in $$list; do \
	  f=`echo "$$p" | sed 's|^.*/||;$(transform)'`; \
	  echo " rm -f '$(DESTDIR)$(pkgdatadir)/$$f'"; \
	  rm -f "$(DESTDIR)$(pkgdatadir)/$$f"; \
	done

mostlyclean-compile:
	-rm -f *.$(OBJEXT)

distclean-compile:
	-rm -f *.tab.c

@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/addrinfo.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/getopt.Plo@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/inet_ntop.Plo@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/inet_pton.Plo@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/localinfo.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/memccpy.Plo@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/memcspn.Plo@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/memmem.Plo@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/memspn.Plo@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/poll.Plo@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/smoothsort.Plo@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/string0.Plo@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/strtoull.Plo@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/su.Plo@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/su_addrinfo.Plo@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/su_alloc.Plo@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/su_alloc_lock.Plo@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/su_base_port.Plo@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/su_bm.Plo@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/su_default_log.Plo@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/su_devpoll_port.Plo@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/su_epoll_port.Plo@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/su_errno.Plo@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/su_global_log.Plo@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/su_kqueue_port.Plo@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/su_localinfo.Plo@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/su_log.Plo@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/su_md5.Plo@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/su_os_nw.Plo@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/su_osx_runloop.Plo@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/su_poll_port.Plo@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/su_port.Plo@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/su_proxy.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/su_pthread_port.Plo@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/su_root.Plo@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/su_select_port.Plo@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/su_socket_port.Plo@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/su_sprintf.Plo@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/su_strdup.Plo@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/su_string.Plo@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/su_strlst.Plo@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/su_tag.Plo@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/su_tag_io.Plo@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/su_tag_ref.Plo@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/su_taglist.Plo@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/su_time.Plo@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/su_time0.Plo@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/su_timer.Plo@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/su_uniqueid.Plo@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/su_vector.Plo@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/su_wait.Plo@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/test_htable.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/test_htable2.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/test_memmem.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/test_poll.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/test_su.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/test_su_osx.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/torture_heap.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/torture_rbtree.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/torture_su.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/torture_su_alloc.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/torture_su_bm.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/torture_su_port.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/torture_su_root.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/torture_su_root_osx.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/torture_su_tag.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/torture_su_time.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/torture_su_timer.Po@am__quote@

.c.obj:
@am__fastdepCC_TRUE@	if $(COMPILE) -MT $@ -MD -MP -MF "$(DEPDIR)/$*.Tpo" -c -o $@ `$(CYGPATH_W) '$<'`; \
@am__fastdepCC_TRUE@	then mv -f "$(DEPDIR)/$*.Tpo" "$(DEPDIR)/$*.Po"; else rm -f "$(DEPDIR)/$*.Tpo"; exit 1; fi
@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='$<' object='$@' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(COMPILE) -c `$(CYGPATH_W) '$<'`

mostlyclean-libtool:
	-rm -f *.lo

clean-libtool:
	-rm -rf .libs _libs

distclean-libtool:
	-rm -f libtool
uninstall-info-am:
install-nobase_include_sofiaHEADERS: $(nobase_include_sofia_HEADERS)
	@$(NORMAL_INSTALL)
	test -z "$(include_sofiadir)" || $(mkdir_p) "$(DESTDIR)$(include_sofiadir)"
	@$(am__vpath_adj_setup) \
	list='$(nobase_include_sofia_HEADERS)'; for p in $$list; do \
	  if test -f "$$p"; then d=; else d="$(srcdir)/"; fi; \
	  $(am__vpath_adj) \
	  echo " $(nobase_include_sofiaHEADERS_INSTALL) '$$d$$p' '$(DESTDIR)$(include_sofiadir)/$$f'"; \
	  $(nobase_include_sofiaHEADERS_INSTALL) "$$d$$p" "$(DESTDIR)$(include_sofiadir)/$$f"; \
	done

uninstall-nobase_include_sofiaHEADERS:
	@$(NORMAL_UNINSTALL)
	@$(am__vpath_adj_setup) \
	list='$(nobase_include_sofia_HEADERS)'; for p in $$list; do \
	  $(am__vpath_adj) \
	  echo " rm -f '$(DESTDIR)$(include_sofiadir)/$$f'"; \
	  rm -f "$(DESTDIR)$(include_sofiadir)/$$f"; \
	done
install-nobase_nodist_include_sofiaHEADERS: $(nobase_nodist_include_sofia_HEADERS)
	@$(NORMAL_INSTALL)
	test -z "$(include_sofiadir)" || $(mkdir_p) "$(DESTDIR)$(include_sofiadir)"
	@$(am__vpath_adj_setup) \
	list='$(nobase_nodist_include_sofia_HEADERS)'; for p in $$list; do \
	  if test -f "$$p"; then d=; else d="$(srcdir)/"; fi; \
	  $(am__vpath_adj) \
	  echo " $(nobase_nodist_include_sofiaHEADERS_INSTALL) '$$d$$p' '$(DESTDIR)$(include_sofiadir)/$$f'"; \
	  $(nobase_nodist_include_sofiaHEADERS_INSTALL) "$$d$$p" "$(DESTDIR)$(include_sofiadir)/$$f"; \
	done

uninstall-nobase_nodist_include_sofiaHEADERS:
	@$(NORMAL_UNINSTALL)
	@$(am__vpath_adj_setup) \
	list='$(nobase_nodist_include_sofia_HEADERS)'; for p in $$list; do \
	  $(am__vpath_adj) \
	  echo " rm -f '$(DESTDIR)$(include_sofiadir)/$$f'"; \
	  rm -f "$(DESTDIR)$(include_sofiadir)/$$f"; \
	done

ID: $(HEADERS) $(SOURCES) $(LISP) $(TAGS_FILES)
	list='$(SOURCES) $(HEADERS) $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '    { files[$$0] = 1; } \
	       END { for (i in files) print i; }'`; \
	mkid -fID $$unique
tags: TAGS

TAGS:  $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	tags=; \
	here=`pwd`; \
	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '    { files[$$0] = 1; } \
	       END { for (i in files) print i; }'`; \
	if test -z "$(ETAGS_ARGS)$$tags$$unique"; then :; else \
	  test -n "$$unique" || unique=$$empty_fix; \
	  $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	    $$tags $$unique; \
	fi
ctags: CTAGS
CTAGS:  $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	tags=; \
	here=`pwd`; \
	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '    { files[$$0] = 1; } \
	       END { for (i in files) print i; }'`; \
	test -z "$(CTAGS_ARGS)$$tags$$unique" \
	  || $(CTAGS) $(CTAGSFLAGS) $(AM_CTAGSFLAGS) $(CTAGS_ARGS) \
	     $$tags $$unique

GTAGS:
	here=`$(am__cd) $(top_builddir) && pwd` \
	  && cd $(top_srcdir) \
	  && gtags -i $(GTAGS_ARGS) $$here

distclean-tags:
	-rm -f TAGS ID GTAGS GRTAGS GSYMS GPATH tags

check-TESTS: $(TESTS)
	@failed=0; all=0; xfail=0; xpass=0; skip=0; \
	srcdir=$(srcdir); export srcdir; \
	list='$(TESTS)'; \
	if test -n "$$list"; then \
	  for tst in $$list; do \
	    if test -f ./$$tst; then dir=./; \
	    elif test -f $$tst; then dir=; \
	    else dir="$(srcdir)/"; fi; \
	    if $(TESTS_ENVIRONMENT) $${dir}$$tst; then \
	      all=`expr $$all + 1`; \
	      case " $(XFAIL_TESTS) " in \
	      *" $$tst "*) \
		xpass=`expr $$xpass + 1`; \
		failed=`expr $$failed + 1`; \
		echo "XPASS: $$tst"; \
	      ;; \
	      *) \
		echo "PASS: $$tst"; \
	      ;; \
	      esac; \
	    elif test $$? -ne 77; then \
	      all=`expr $$all + 1`; \
	      case " $(XFAIL_TESTS) " in \
	      *" $$tst "*) \
		xfail=`expr $$xfail + 1`; \
		echo "XFAIL: $$tst"; \
	      ;; \
	      *) \
		failed=`expr $$failed + 1`; \
		echo "FAIL: $$tst"; \
	      ;; \
	      esac; \
	    else \
	      skip=`expr $$skip + 1`; \
	      echo "SKIP: $$tst"; \
	    fi; \
	  done; \
	  if test "$$failed" -eq 0; then \
	    if test "$$xfail" -eq 0; then \
	      banner="All $$all tests passed"; \
	    else \
	      banner="All $$all tests behaved as expected ($$xfail expected failures)"; \
	    fi; \
	  else \
	    if test "$$xpass" -eq 0; then \
	      banner="$$failed of $$all tests failed"; \
	    else \
	      banner="$$failed of $$all tests did not behave as expected ($$xpass unexpected passes)"; \
	    fi; \
	  fi; \
	  dashes="$$banner"; \
	  skipped=""; \
	  if test "$$skip" -ne 0; then \
	    skipped="($$skip tests were not run)"; \
	    test `echo "$$skipped" | wc -c` -le `echo "$$banner" | wc -c` || \
	      dashes="$$skipped"; \
	  fi; \
	  report=""; \
	  if test "$$failed" -ne 0 && test -n "$(PACKAGE_BUGREPORT)"; then \
	    report="Please report to $(PACKAGE_BUGREPORT)"; \
	    test `echo "$$report" | wc -c` -le `echo "$$banner" | wc -c` || \
	      dashes="$$report"; \
	  fi; \
	  dashes=`echo "$$dashes" | sed s/./=/g`; \
	  echo "$$dashes"; \
	  echo "$$banner"; \
	  test -z "$$skipped" || echo "$$skipped"; \
	  test -z "$$report" || echo "$$report"; \
	  echo "$$dashes"; \
	  test "$$failed" -eq 0; \
	else :; fi

distdir: $(DISTFILES)
	$(mkdir_p) $(distdir)/../../rules $(distdir)/sofia-sip
	@srcdirstrip=`echo "$(srcdir)" | sed 's|.|.|g'`; \
	topsrcdirstrip=`echo "$(top_srcdir)" | sed 's|.|.|g'`; \
	list='$(DISTFILES)'; for file in $$list; do \
	  case $$file in \
	    $(srcdir)/*) file=`echo "$$file" | sed "s|^$$srcdirstrip/||"`;; \
	    $(top_srcdir)/*) file=`echo "$$file" | sed "s|^$$topsrcdirstrip/|$(top_builddir)/|"`;; \
	  esac; \
	  if test -f $$file || test -d $$file; then d=.; else d=$(srcdir); fi; \
	  dir=`echo "$$file" | sed -e 's,/[^/]*$$,,'`; \
	  if test "$$dir" != "$$file" && test "$$dir" != "."; then \
	    dir="/$$dir"; \
	    $(mkdir_p) "$(distdir)$$dir"; \
	  else \
	    dir=''; \
	  fi; \
	  if test -d $$d/$$file; then \
	    if test -d $(srcdir)/$$file && test $$d != $(srcdir); then \
	      cp -pR $(srcdir)/$$file $(distdir)$$dir || exit 1; \
	    fi; \
	    cp -pR $$d/$$file $(distdir)$$dir || exit 1; \
	  else \
	    test -f $(distdir)/$$file \
	    || cp -p $$d/$$file $(distdir)/$$file \
	    || exit 1; \
	  fi; \
	done
check-am: all-am
	$(MAKE) $(AM_MAKEFLAGS) $(check_PROGRAMS)
	$(MAKE) $(AM_MAKEFLAGS) check-TESTS
check: $(BUILT_SOURCES)
	$(MAKE) $(AM_MAKEFLAGS) check-am
all-am: Makefile $(LTLIBRARIES) $(PROGRAMS) $(SCRIPTS) $(HEADERS)
installdirs:
	for dir in "$(DESTDIR)$(bindir)" "$(DESTDIR)$(pkgdatadir)" "$(DESTDIR)$(include_sofiadir)" "$(DESTDIR)$(include_sofiadir)"; do \
	  test -z "$$dir" || $(mkdir_p) "$$dir"; \
	done
install: $(BUILT_SOURCES)
	$(MAKE) $(AM_MAKEFLAGS) install-am
install-exec: install-exec-am
install-data: install-data-am
uninstall: uninstall-am

install-am: all-am
	@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am

installcheck: installcheck-am
install-strip:
	$(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	  install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	  `test -z '$(STRIP)' || \
	    echo "INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'"` install
mostlyclean-generic:
	-test -z "$(MOSTLYCLEANFILES)" || rm -f $(MOSTLYCLEANFILES)

clean-generic:

distclean-generic:
	-test -z "$(CONFIG_CLEAN_FILES)" || rm -f $(CONFIG_CLEAN_FILES)
	-test -z "$(DISTCLEANFILES)" || rm -f $(DISTCLEANFILES)

maintainer-clean-generic:
	@echo "This command is intended for maintainers to use"
	@echo "it deletes files that may require special tools to rebuild."
	-test -z "$(BUILT_SOURCES)" || rm -f $(BUILT_SOURCES)
@HAVE_LCOV_FALSE@clean-local:
clean: clean-am

clean-am: clean-binPROGRAMS clean-checkPROGRAMS clean-generic \
	clean-libtool clean-local clean-noinstLTLIBRARIES \
	mostlyclean-am

distclean: distclean-am
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
distclean-am: clean-am distclean-compile distclean-generic \
	distclean-libtool distclean-tags

dvi: dvi-am

dvi-am:

html: html-am

info: info-am

info-am:

install-data-am: install-dist_pkgdataSCRIPTS \
	install-nobase_include_sofiaHEADERS \
	install-nobase_nodist_include_sofiaHEADERS

install-exec-am: install-binPROGRAMS

install-info: install-info-am

install-man:

installcheck-am:

maintainer-clean: maintainer-clean-am
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
maintainer-clean-am: distclean-am maintainer-clean-generic

mostlyclean: mostlyclean-am

mostlyclean-am: mostlyclean-compile mostlyclean-generic \
	mostlyclean-libtool

pdf: pdf-am

pdf-am:

ps: ps-am

ps-am:

uninstall-am: uninstall-binPROGRAMS uninstall-dist_pkgdataSCRIPTS \
	uninstall-info-am uninstall-nobase_include_sofiaHEADERS \
	uninstall-nobase_nodist_include_sofiaHEADERS

.PHONY: CTAGS GTAGS all all-am check check-TESTS check-am clean \
	clean-binPROGRAMS clean-checkPROGRAMS clean-generic \
	clean-libtool clean-local clean-noinstLTLIBRARIES ctags \
	distclean distclean-compile distclean-generic \
	distclean-libtool distclean-tags distdir dvi dvi-am html \
	html-am info info-am install install-am install-binPROGRAMS \
	install-data install-data-am install-dist_pkgdataSCRIPTS \
	install-exec install-exec-am install-info install-info-am \
	install-man install-nobase_include_sofiaHEADERS \
	install-nobase_nodist_include_sofiaHEADERS install-strip \
	installcheck installcheck-am installdirs maintainer-clean \
	maintainer-clean-generic mostlyclean mostlyclean-compile \
	mostlyclean-generic mostlyclean-libtool pdf pdf-am ps ps-am \
	tags uninstall uninstall-am uninstall-binPROGRAMS \
	uninstall-dist_pkgdataSCRIPTS uninstall-info-am \
	uninstall-nobase_include_sofiaHEADERS \
	uninstall-nobase_nodist_include_sofiaHEADERS


sofia-sip/su_configure.h: sofia-sip/su_configure.h.in

built-sources: $(BUILT_SOURCES)

clean-built-sources:
	-rm -rf $(BUILT_SOURCES) $(BUILT_SOURCES:%=$(srcdir)/%)

*_tag_ref.c: $(TAG_AWK)

_tag.c_tag_ref.c:
	$(AWK) -f $(TAG_AWK) NODLL=1 $(TAG_DLL_FLAGS) REF=$@ $<

../bnf/libbnf.la ../http/libhttp.la ../ipt/libipt.la ../iptsec/libiptsec.la \
 ../msg/libmsg.la ../nea/libnea.la ../nta/libnta.la ../nth/libnth.la \
 ../nua/libnua.la ../sdp/libsdp.la ../sip/libsip.la ../soa/libsoa.la \
 ../sresolv/libsresolv.la ../stun/libstun.la ../su/libsu.la \
 ../tport/libtport.la ../url/liburl.la:
	cd $(@D) && $(MAKE) $(@F)

checklib: $(noinst_LTLIBRARIES) $(check_LTLIBRARIES)

valcheck: $(BUILT_SOURCES)
	$(MAKE) $(AM_MAKEFLAGS) valcheck-am

valcheck-am: all-am
	$(MAKE) $(AM_MAKEFLAGS) $(check_PROGRAMS)
	$(MAKE) $(AM_MAKEFLAGS) valcheck-TESTS

# Run tests with valgrind in
valcheck-TESTS:	$(TESTS)
	@failed=0; all=0; xfail=0; xpass=0; skip=0; \
	srcdir=$(srcdir); export srcdir; \
	list='$(TESTS)'; \
	if test -n "$$list"; then \
	  for tst in $$list; do \
	    if test -f ./$$tst; then dir=./; \
	    elif test -f $$tst; then dir=; \
	    else dir="$(srcdir)/"; fi; \
	    if case $$tst in \
            run*) VALGRIND="$(VALGRIND) $(VALGRINDFLAGS)" \
		  $(TESTS_ENVIRONMENT) $${dir}$$tst ;; \
	    *) $(TESTS_ENVIRONMENT) $(VALGRIND) $(VALGRINDFLAGS) \
	       $${dir}$$tst ;; \
	    esac ; then \
	      all=`expr $$all + 1`; \
	      case " $(XFAIL_TESTS) " in \
	      *" $$tst "*) \
		xpass=`expr $$xpass + 1`; \
		failed=`expr $$failed + 1`; \
		echo "XPASS: $$tst"; \
	      ;; \
	      *) \
		echo "PASS: $$tst"; \
	      ;; \
	      esac; \
	    elif test $$? -ne 77; then \
	      all=`expr $$all + 1`; \
	      case " $(XFAIL_TESTS) " in \
	      *" $$tst "*) \
		xfail=`expr $$xfail + 1`; \
		echo "XFAIL: $$tst"; \
	      ;; \
	      *) \
		failed=`expr $$failed + 1`; \
		echo "FAIL: $$tst"; \
	      ;; \
	      esac; \
	    else \
	      skip=`expr $$skip + 1`; \
	      echo "SKIP: $$tst"; \
	    fi; \
	  done; \
	  if test "$$failed" -eq 0; then \
	    if test "$$xfail" -eq 0; then \
	      banner="All $$all tests passed"; \
	    else \
	      banner="All $$all tests behaved as expected ($$xfail expected failures)"; \
	    fi; \
	  else \
	    if test "$$xpass" -eq 0; then \
	      banner="$$failed of $$all tests failed"; \
	    else \
	      banner="$$failed of $$all tests did not behave as expected ($$xpass unexpected passes)"; \
	    fi; \
	  fi; \
	  dashes="$$banner"; \
	  skipped=""; \
	  if test "$$skip" -ne 0; then \
	    skipped="($$skip tests were not run)"; \
	    test `echo "$$skipped" | wc -c` -le `echo "$$banner" | wc -c` || \
	      dashes="$$skipped"; \
	  fi; \
	  report=""; \
	  if test "$$failed" -ne 0 && test -n "$(PACKAGE_BUGREPORT)"; then \
	    report="Please report to $(PACKAGE_BUGREPORT)"; \
	    test `echo "$$report" | wc -c` -le `echo "$$banner" | wc -c` || \
	      dashes="$$report"; \
	  fi; \
	  dashes=`echo "$$dashes" | sed s/./=/g`; \
	  echo "$$dashes"; \
	  echo "$$banner"; \
	  test -z "$$skipped" || echo "$$skipped"; \
	  test -z "$$report" || echo "$$report"; \
	  echo "$$dashes"; \
	  test "$$failed" -eq 0; \
	else :; fi

#
# Generate pretty coverage report (unless it has been already done)
#
@HAVE_LCOV_TRUE@lcov:
@HAVE_LCOV_TRUE@	@-test -r ${lcovdir}${expand_subdir}/lcov.info \
@HAVE_LCOV_TRUE@	|| make lcov-report

# Generate pretty coverage report based on current coverage data
@HAVE_LCOV_TRUE@lcov-report:
@HAVE_LCOV_TRUE@	sub=${expand_subdir} odir=${lcovdir}$$sub ; \
@HAVE_LCOV_TRUE@	rm -rf $$odir ; mkdir -p $$odir && \
@HAVE_LCOV_TRUE@	${LCOV_REPORT} ${GENHTML_OPTIONS} \
@HAVE_LCOV_TRUE@          --title "${PACKAGE_NAME}-${PACKAGE_VERSION}$$sub" \
@HAVE_LCOV_TRUE@	  --srcdir=${srcdir} -o $$odir

# Rerun checks before generating report
@HAVE_LCOV_TRUE@lcov-rerun: clean-lcov
@HAVE_LCOV_TRUE@	$(MAKE) $(AM_MAKEFLAGS) check
@HAVE_LCOV_TRUE@	$(MAKE) $(AM_MAKEFLAGS) lcov-report

# Show all uncovered lines as errors
@HAVE_LCOV_TRUE@uncovered:
@HAVE_LCOV_TRUE@	${LCOV_UNCOVERED} --lcov-dir=${lcovdir} --srcdir=${srcdir}

# Run check in current dir and show all uncovered lines as errors
@HAVE_LCOV_TRUE@covcheck:
@HAVE_LCOV_TRUE@	-find . -name "*.gcda" | xargs rm -rf
@HAVE_LCOV_TRUE@	$(MAKE) $(AM_MAKEFLAGS) check
@HAVE_LCOV_TRUE@	${LCOV_UNCOVERED} --lcov-dir=${lcovdir} --srcdir=${srcdir}

@HAVE_LCOV_TRUE@clean-local::
@HAVE_LCOV_TRUE@	-rm -rf ${lcovdir}`pwd|sed "s'\`cd ${top_builddir};pwd\`''"`
@HAVE_LCOV_TRUE@	find . -name "*.gcda" | xargs rm -f || true

@HAVE_LCOV_TRUE@clean-lcov:
@HAVE_LCOV_TRUE@	-rm -rf ${lcovdir}`pwd|sed "s'\`cd ${top_builddir};pwd\`''"`
@HAVE_LCOV_TRUE@	find . -name "*.gcda" | xargs rm -f || true

# Rules from depend2.am (GENERIC = TRUE, SUBDIROBJ = FALSE, %FASTDEP% = am_fastdepCC) silenced. 
.c.o:
	@test "${SOFIA_SILENT}" != @ || echo '	 COMPILE $@'
@am__fastdepCC_TRUE@	${SOFIA_SILENT}if $(COMPILE) -MT $@ -MD -MP -MF "$(DEPDIR)/$*.Tpo" -c -o $@ $<; \
@am__fastdepCC_TRUE@	then mv -f "$(DEPDIR)/$*.Tpo" "$(DEPDIR)/$*.Po"; else rm -f "$(DEPDIR)/$*.Tpo"; exit 1; fi
@AMDEP_TRUE@@am__fastdepCC_FALSE@	${SOFIA_SILENT}source='$<' object='$@' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR="$(DEPDIR)" $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	$(COMPILE) -c -o $@ $<
@AMDEP_FALSE@@am__fastdepCC_FALSE@	${SOFIA_SILENT}$(COMPILE) -c -o $@ $<

.c.lo:
	@test "${SOFIA_SILENT}" != @ || echo '	 LTCOMPILE $@'
@am__fastdepCC_TRUE@	${SOFIA_SILENT}if $(LTCOMPILE) -MT $@ -MD -MP -MF "$(DEPDIR)/$*.Tpo" -c -o $@ $<; \
@am__fastdepCC_TRUE@	then mv -f "$(DEPDIR)/$*.Tpo" "$(DEPDIR)/$*.Plo"; else rm -f "$(DEPDIR)/$*.Tpo"; exit 1; fi
@AMDEP_TRUE@@am__fastdepCC_FALSE@	${SOFIA_SILENT}source='$<' object='$@' libtool=yes @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR="$(DEPDIR)" $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	$(LTCOMPILE) -c -o $@ $<
@AMDEP_FALSE@@am__fastdepCC_FALSE@	${SOFIA_SILENT}$(LTCOMPILE) -c -o $@ $<

# endif
# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:
